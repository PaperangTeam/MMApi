#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef MMDEVICEKIT_SWIFT_H
#define MMDEVICEKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MMDeviceKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM_NAMED(NSInteger, BluetoothState, "BluetoothState", closed) {
  BluetoothStateUnknown = 0,
  BluetoothStateResetting = 1,
  BluetoothStateUnsupported = 2,
  BluetoothStateUnauthorized = 3,
  BluetoothStatePoweredOff = 4,
  BluetoothStatePoweredOn = 5,
};

typedef SWIFT_ENUM(NSInteger, FailUseDeviceCode, closed) {
  FailUseDeviceCodeIgnore = 0,
  FailUseDeviceCodeUnrecognize = -1,
  FailUseDeviceCodeDisallow = -2,
  FailUseDeviceCodeConnectFail = -3,
  FailUseDeviceCodeDeviceDisconnect = -4,
  FailUseDeviceCodeCmdDisconnect = -5,
  FailUseDeviceCodeNetworkError = 313,
  FailUseDeviceCodeUnowned = 314,
};

@class NSString;
@class NSNumber;

SWIFT_CLASS("_TtC11MMDeviceKit8MMDevice")
@interface MMDevice : NSObject
@property (nonatomic, copy) NSString * _Nullable deviceName;
@property (nonatomic, copy) NSString * _Nullable deviceType;
@property (nonatomic, copy) NSString * _Nullable snCode;
@property (nonatomic, copy) NSString * _Nullable alias;
@property (nonatomic, copy) NSString * _Nullable MacAdress;
@property (nonatomic, copy) NSString * _Nullable readableMacAdress;
@property (nonatomic) uint16_t offtime;
@property (nonatomic) uint8_t battery;
@property (nonatomic, copy) NSString * _Nullable firmVersion;
@property (nonatomic, copy) NSString * _Nullable firmVersionNew;
@property (nonatomic, copy) NSString * _Nullable firmDownloadPath;
@property (nonatomic, copy) NSString * _Nullable firmVerifyMD5;
@property (nonatomic, copy) NSString * _Nullable firmUpdateDescription;
@property (nonatomic) BOOL needUpgrade;
@property (nonatomic) BOOL forceUpdate;
@property (nonatomic) NSInteger maxPackageLength;
@property (nonatomic) NSInteger maxPackageCount;
@property (nonatomic) uint16_t maxWidth;
@property (nonatomic) uint16_t imageWidth;
@property (nonatomic) uint16_t bottomFeedLine;
- (BOOL)isConnected SWIFT_WARN_UNUSED_RESULT;
/// 服务端校验的 code
@property (nonatomic, copy) NSString * _Nonnull serverCode;
/// 服务端校验的 sign
@property (nonatomic, copy) NSString * _Nonnull serverSign;
- (void)setValue:(id _Nullable)value forUndefinedKey:(NSString * _Nonnull)key;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CBCharacteristic;

SWIFT_CLASS("_TtC11MMDeviceKit12MMGattDevice")
@interface MMGattDevice : MMDevice
@property (nonatomic, copy) NSString * _Nullable uuid;
@property (nonatomic, strong) NSNumber * _Nullable rssi;
@property (nonatomic) double vol;
@property (nonatomic, copy) NSString * _Nullable btVersion;
@property (nonatomic) double temperature;
@property (nonatomic, strong) CBCharacteristic * _Nullable writeCharacteristic;
@property (nonatomic, copy) NSString * _Nullable writeCharacteristicString;
@property (nonatomic, copy) NSString * _Nullable btCharacteristicString;
@property (nonatomic, copy) NSString * _Nullable mcuCharacteristicString;
@property (nonatomic, copy) NSString * _Nullable bindInfo;
@property (nonatomic) uint16_t supportDpi;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable supportColour;
@property (nonatomic) uint8_t density;
@property (nonatomic) BOOL supportBreakpoointResume;
- (void)setValue:(id _Nullable)value forUndefinedKey:(NSString * _Nonnull)key;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSArray<NSNumber *> * _Nonnull)getSupportSizeOC SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11MMDeviceKit11IBangDevice")
@interface IBangDevice : MMGattDevice
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11MMDeviceKit16MMAlarmInfoModel")
@interface MMAlarmInfoModel : NSObject
@property (nonatomic) NSInteger hour;
@property (nonatomic) NSInteger minute;
@property (nonatomic) NSInteger second;
@property (nonatomic) NSInteger cycle;
@property (nonatomic) BOOL isOpen;
@property (nonatomic) uint8_t openAndOrder;
/// 新a5协议 代表alarmid
@property (nonatomic) NSInteger alarmId;
/// 新协议 0（关闭） 默认铃声1（打开）
@property (nonatomic) NSInteger bellsType;
/// 是否延时提醒
@property (nonatomic) BOOL isDelayAlarm;
@property (nonatomic, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(uint8_t, MMAlarmToneType, "MMAlarmToneType", closed) {
  MMAlarmToneTypeKeytone = 0x01,
  MMAlarmToneTypeTimer = 0x02,
  MMAlarmToneTypeAlarm = 0x03,
  MMAlarmToneTypeTomato = 0x04,
};


SWIFT_CLASS("_TtC11MMDeviceKit22MMBLENotificationModel")
@interface MMBLENotificationModel : NSObject
/// 通知名
@property (nonatomic, copy) NSString * _Nullable notificationName;
/// 该事件是否成功
@property (nonatomic) BOOL isSuccess;
/// 其他信息
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable otherInfo;
/// 设备模型
@property (nonatomic, strong) MMDevice * _Nullable device;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MMTomatoInfoModel;

SWIFT_CLASS("_TtC11MMDeviceKit13MMClockDevice")
@interface MMClockDevice : MMGattDevice
/// 是否是24小时制
@property (nonatomic) BOOL is24Hour;
/// 按键音开关
@property (nonatomic) BOOL isKeySoundOpen;
/// 番茄音开关
@property (nonatomic) BOOL isTomatoSoundOpen;
/// 计时音开关
@property (nonatomic) BOOL isCountdownSoundOpen;
/// 关机闹钟开关
@property (nonatomic) BOOL isPowerOffAlarm;
/// 番茄纸条开关
@property (nonatomic) BOOL isTomatoNoteOpen;
/// 闹钟纸条开关
@property (nonatomic) BOOL isAlarmNoteOpen;
/// 工作时间
@property (nonatomic) NSInteger workMinute;
/// 休息时间
@property (nonatomic) NSInteger breakMinute;
/// 番茄音
@property (nonatomic) NSInteger tomatoBell;
/// 计时音类型
@property (nonatomic) NSInteger countdownBell;
/// 熄屏时间，单位秒
@property (nonatomic) NSInteger suspendSecond;
///
@property (nonatomic, copy) NSArray<MMAlarmInfoModel *> * _Nonnull alarmsArray;
///
@property (nonatomic, copy) NSArray<MMTomatoInfoModel *> * _Nonnull tomatosArray;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11MMDeviceKit13MMCloudDevice")
@interface MMCloudDevice : MMDevice
@property (nonatomic, copy) NSString * _Nullable ram;
@property (nonatomic, copy) NSString * _Nullable rom;
@property (nonatomic, copy) NSString * _Nullable bindInfo;
@property (nonatomic, copy) NSString * _Nullable delegate;
@property (nonatomic, copy) NSString * _Nullable printerName;
@property (nonatomic, copy) NSString * _Nullable shareUserNickName;
@property (nonatomic, copy) NSString * _Nullable selectDate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MMCloudPrinter;

SWIFT_CLASS("_TtC11MMDeviceKit16MMCloudBoxDevice")
@interface MMCloudBoxDevice : MMCloudDevice
@property (nonatomic, copy) NSArray<MMCloudPrinter *> * _Nonnull printerList;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(uint8_t, MMCloudConnectWifiResult, "MMCloudConnectWifiResult", closed) {
  MMCloudConnectWifiResultSuccess = 0x01,
  MMCloudConnectWifiResultOtherError = 0x02,
  MMCloudConnectWifiResultPasswordError = 0x03,
};


typedef SWIFT_ENUM_NAMED(uint8_t, MMCloudNetworkPortStatus, "MMCloudNetworkPortStatus", closed) {
  MMCloudNetworkPortStatusUnConnect = 0x00,
  MMCloudNetworkPortStatusConnecting = 0x01,
  MMCloudNetworkPortStatusConnected = 0x02,
};


SWIFT_CLASS("_TtC11MMDeviceKit14MMCloudPrinter")
@interface MMCloudPrinter : MMCloudDevice
@property (nonatomic, copy) NSString * _Nullable pageSize;
@property (nonatomic, copy) NSString * _Nullable mediaType;
@property (nonatomic, copy) NSString * _Nullable paperState;
@property (nonatomic) NSInteger inkLevel;
@property (nonatomic) NSInteger error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(uint8_t, MMCloudServerStatus, "MMCloudServerStatus", closed) {
  MMCloudServerStatusUnConnect = 0x00,
  MMCloudServerStatusConnecting = 0x01,
  MMCloudServerStatusConnected = 0x02,
};

typedef SWIFT_ENUM_NAMED(uint8_t, MMCloudWifiStatus, "MMCloudWifiStatus", closed) {
  MMCloudWifiStatusIdle = 0x00,
  MMCloudWifiStatusConnecting = 1,
  MMCloudWifiStatusConnectFaild = 2,
  MMCloudWifiStatusPassError = 3,
  MMCloudWifiStatusConnectSuccess = 0x04,
  MMCloudWifiStatusDisConnect = 0x05,
  MMCloudWifiStatusWifiOpen = 6,
  MMCloudWifiStatusWifiClose = 7,
};


SWIFT_CLASS("_TtC11MMDeviceKit8MMConfig")
@interface MMConfig : NSObject
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MMConfig * _Nonnull shared;)
+ (MMConfig * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 是否打印日志
@property (nonatomic) BOOL showLog;
/// 搜索设备的名字黑名单
@property (nonatomic, copy) NSArray<NSString *> * _Nullable unEnableNameArray;
/// 获取外部userID，用于P2S
@property (nonatomic, copy) NSString * _Nonnull (^ _Nullable getUserId)(void);
/// 蓝牙关闭
@property (nonatomic, copy) void (^ _Nullable blePoweredOff)(void);
/// 意外断开
@property (nonatomic, copy) void (^ _Nullable accidentDisconnect)(void);
/// 打印机状态
@property (nonatomic, copy) void (^ _Nullable helperViewSetStatuBlock)(NSInteger);
/// 双击按钮断开
@property (nonatomic, copy) void (^ _Nullable handleDisconnectBTCmdBlock)(void);
/// 注册设备参数
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable (^ _Nullable registDevicePara)(MMDevice * _Nullable);
/// 注册成功
@property (nonatomic, copy) void (^ _Nullable handleRegistDeviceSuccessShowHudBlock)(void);
/// 是否需要检查升级
@property (nonatomic, copy) BOOL (^ _Nullable shouldUpdateBlock)(MMDevice * _Nullable);
/// 注册成功后，处理纸张
@property (nonatomic, copy) void (^ _Nullable handlePaperAfterRegistDeviceBlock)(MMDevice * _Nullable);
/// 注册流程全部完成
@property (nonatomic, copy) void (^ _Nullable registFinish)(MMDevice * _Nullable);
/// 打印图片但是没连接设备时
@property (nonatomic, copy) void (^ _Nullable printImageButNotConnect)(MMDevice * _Nullable);
/// 打印成功
@property (nonatomic, copy) void (^ _Nullable handlePrintImageSuccessBlock)(void);
/// 升级成功
@property (nonatomic, copy) void (^ _Nullable didUpdateSuccessBlock)(void);
/// 是否支持平级升级
@property (nonatomic) BOOL isAllowUpgradeWhenEqual;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11MMDeviceKit17MMConfigNetDevice")
@interface MMConfigNetDevice : MMGattDevice
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class UIImage;
@class NSData;
@class MMPrintTask;

SWIFT_CLASS("_TtC11MMDeviceKit11MMDeviceApi")
@interface MMDeviceApi : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MMDevice * _Nullable mainDevice;)
+ (MMDevice * _Nullable)mainDevice SWIFT_WARN_UNUSED_RESULT;
/// 是否捕获并上传崩溃信息，默认为true，若开启会影响其他第三方库的crash捕获
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL crashUpload;)
+ (BOOL)crashUpload SWIFT_WARN_UNUSED_RESULT;
+ (void)setCrashUpload:(BOOL)value;
/// 注册 MMDeviceKit , 注册成功立刻开启蓝牙扫描
+ (void)regist:(NSString * _Nullable)appKey :(NSString * _Nullable)appSecret :(long)appID :(void (^ _Nullable)(void))success :(void (^ _Nullable)(NSInteger, NSString * _Nullable))fail;
/// 注册 MMDeviceKit , 不开启蓝牙扫描
+ (void)registWithoutScan:(NSString * _Nullable)appKey :(NSString * _Nullable)appSecret :(long)appID :(void (^ _Nullable)(void))success :(void (^ _Nullable)(NSInteger, NSString * _Nullable))fail;
+ (NSString * _Nonnull)getSdkVersion SWIFT_WARN_UNUSED_RESULT;
/// SDK是否已经认证
+ (BOOL)isAuthorized SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)getBluetoothAuthorizationStatus SWIFT_WARN_UNUSED_RESULT;
+ (void)showLog:(BOOL)showLog;
+ (void)setScanOvertime:(NSTimeInterval)overtime;
+ (void)autoReconnect:(BOOL)autoReconnect;
+ (enum BluetoothState)getGattState SWIFT_WARN_UNUSED_RESULT;
+ (uint8_t)getDensity:(MMDevice * _Nullable)device SWIFT_WARN_UNUSED_RESULT;
+ (void)getAvailableDevices:(void (^ _Nonnull)(NSArray<MMDevice *> * _Nonnull))devicesHandle;
+ (void)startGattScan:(void (^ _Nonnull)(NSArray<MMDevice *> * _Nonnull))devicesHandle;
+ (void)stopFetchDevice;
+ (NSArray<MMDevice *> * _Nonnull)getUsingDevices SWIFT_WARN_UNUSED_RESULT;
+ (void)useDevice:(MMDevice * _Nullable)device;
+ (void)useDeviceWithMac:(NSString * _Nullable)mac;
+ (void)unuseDevice:(MMDevice * _Nullable)device;
+ (MMDevice * _Nullable)getDevice:(NSString * _Nullable)mac SWIFT_WARN_UNUSED_RESULT;
+ (void)unuseDeviceWithoutResponse:(MMDevice * _Nullable)device;
+ (void)print:(MMDevice * _Nullable)device :(UIImage * _Nullable)image :(BOOL)isMono :(NSInteger)copy;
/// 标签打印
+ (void)printLabel:(MMDevice * _Nullable)device :(UIImage * _Nullable)image :(BOOL)isMono :(NSInteger)copy;
+ (void)printData:(MMDevice * _Nullable)device :(NSData * _Nullable)data :(NSInteger)copy;
+ (void)addPrintTask:(MMPrintTask * _Nullable)task;
+ (void)printTestPaper:(MMGattDevice * _Nullable)device;
+ (void)updateGattDevice:(MMGattDevice * _Nullable)device :(NSData * _Nullable)firm;
+ (void)setPowerOffTime:(MMDevice * _Nullable)device :(uint16_t)interval;
+ (void)setDensity:(MMDevice * _Nullable)device :(uint8_t)density;
+ (void)setSense:(MMDevice * _Nullable)device :(uint32_t)sense;
+ (void)getBattery:(MMDevice * _Nullable)device :(void (^ _Nullable)(MMDevice * _Nullable, uint8_t))complete;
+ (void)getWifiList:(MMDevice * _Nullable)device;
+ (void)checkPortsStatus:(MMDevice * _Nullable)device;
+ (void)configWifiWithSsid:(NSString * _Nullable)ssid password:(NSString * _Nullable)password device:(MMDevice * _Nullable)device;
+ (void)connectedServer:(MMDevice * _Nullable)device;
+ (void)closeBluetooth:(MMDevice * _Nullable)device;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface MMDeviceApi (SWIFT_EXTENSION(MMDeviceKit))
/// 获取机器闹钟相关信息
/// return: MMClockDevice
+ (void)getClockInfo:(MMDevice * _Nullable)device complete:(void (^ _Nullable)(MMClockDevice * _Nonnull))complete;
/// 设置时间 2021 4 28 21 3 0
+ (void)setDeviceTime:(MMDevice * _Nullable)device year:(NSInteger)year month:(NSInteger)month day:(NSInteger)day hours:(NSInteger)hours minute:(NSInteger)minute second:(NSInteger)second;
/// 设置小时制
+ (void)setTimeMode:(MMDevice * _Nullable)device is24Hour:(BOOL)is24Hour;
/// 添加/更新闹钟
/// @param model model description
+ (void)updateAlarm:(MMDevice * _Nullable)device model:(MMAlarmInfoModel * _Nonnull)model;
/// 删除闹钟 确保旧协议有正确的alarmId(添加后从设备重新获取)
/// @param model model description
+ (void)deleteAlarm:(MMDevice * _Nullable)device alarmId:(uint32_t)alarmId;
/// 设置关机闹钟开关
/// @param isOpen 是否打开
+ (void)setPowerOffAlarm:(MMDevice * _Nullable)device isOpen:(BOOL)isOpen;
/// 设置熄屏时间,单位为秒
+ (void)setSuspendTimeSecond:(MMDevice * _Nullable)device second:(NSInteger)second;
/// 设置番茄时钟工作/休息时间,单位为分钟
+ (void)setTomatoClockTime:(MMDevice * _Nullable)device worktime:(NSInteger)worktime breaktime:(NSInteger)breaktime;
/// 设置番茄钟提醒纸条开关
+ (void)setTomatoNoteOpen:(MMDevice * _Nullable)device isOpen:(BOOL)isOpen;
/// 设置番茄钟提醒纸条数据
+ (void)setTomatoNote:(MMDevice * _Nullable)device image:(UIImage * _Nullable)image;
/// 设置闹钟提醒纸条开关
+ (void)setAlarmNoteOpen:(MMDevice * _Nullable)device isOpen:(BOOL)isOpen;
/// 设置闹钟提醒纸条数据
+ (void)setAlarmNote:(MMDevice * _Nullable)device image:(UIImage * _Nullable)image;
/// 设置按键音
+ (void)setKeySoundOpen:(MMDevice * _Nullable)device isOpen:(BOOL)isOpen;
/// 设置计时提示音
+ (void)setTimerSoundOpen:(MMDevice * _Nullable)device isOpen:(BOOL)isOpen;
/// 设置闹钟提示音
+ (void)setAlarmSoundOpen:(MMDevice * _Nullable)device isOpen:(BOOL)isOpen;
/// 设置番茄时钟提示音
+ (void)setTomatoSoundOpen:(MMDevice * _Nullable)device isOpen:(BOOL)isOpen;
/// 设置闹钟延时提醒时间,单位为分钟
+ (void)setAlarmDelayTimeWithMinutes:(MMDevice * _Nullable)device minutes:(NSInteger)minutes;
+ (void)bindDevice:(MMDevice * _Nullable)device :(NSString * _Nonnull)key;
+ (void)unbindDevice:(MMDevice * _Nullable)device :(void (^ _Nonnull)(BOOL))complete;
/// 告知同步状态
+ (void)noticeSyncTaskStatus:(MMGattDevice * _Nullable)device start:(BOOL)start;
+ (void)test:(MMGattDevice * _Nullable)device;
@end


SWIFT_CLASS("_TtC11MMDeviceKit15MMDeviceNetwork")
@interface MMDeviceNetwork : NSObject
+ (void)config:(NSString * _Nonnull)appKey :(NSString * _Nonnull)appSecret :(long)appID;
+ (void)post2OCWith:(NSString * _Nonnull)request parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters complete:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nonnull))complete failure:(void (^ _Nullable)(NSInteger, NSString * _Nullable))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC11MMDeviceKit21MMNotificationStrings")
@interface MMNotificationStrings : NSObject
/// 打印数据大小变化
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull printDataSizeChangeNotificationName;)
+ (NSString * _Nonnull)printDataSizeChangeNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 所有图片都打印完成
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull printFinishNotificationName;)
+ (NSString * _Nonnull)printFinishNotificationName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum MMPrintPaperType : NSInteger;

SWIFT_CLASS("_TtC11MMDeviceKit13MMPrintConfig")
@interface MMPrintConfig : NSObject
@property (nonatomic) CGFloat targetWidth;
@property (nonatomic) NSInteger supportDpi;
@property (nonatomic) uint8_t precision;
@property (nonatomic) uint16_t width;
@property (nonatomic) uint16_t maxWidth;
@property (nonatomic) uint16_t offset;
@property (nonatomic) uint8_t isCompress;
/// 打印类型
@property (nonatomic) enum MMPrintPaperType paperType;
/// 份数
@property (nonatomic) NSInteger count;
/// 是否打印头部走纸
@property (nonatomic) BOOL printTopFeed;
@property (nonatomic) uint16_t topFeed;
@property (nonatomic, readonly) NSInteger labelFeedLineOld;
@property (nonatomic, readonly) uint32_t labelFeedLine;
/// 是否打印底部走纸
@property (nonatomic) BOOL printBottomFeed;
@property (nonatomic) uint16_t bottomFeed;
- (void)configWith:(MMDevice * _Nonnull)device;
- (void)configTargetWidthAndOffset:(NSInteger)targetSize :(MMGattDevice * _Nonnull)device;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11MMDeviceKit14MMPrintContent")
@interface MMPrintContent : NSObject
/// 单张图片,加入队列后自动清空
@property (nonatomic, copy) NSString * _Nullable imagePath;
/// 是否单色图
@property (nonatomic) BOOL isMono;
@property (nonatomic, copy) NSArray<NSValue *> * _Nullable points;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image isMono:(BOOL)isMono OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11MMDeviceKit14MMPrintManager")
@interface MMPrintManager : NSObject
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MMPrintManager * _Nonnull shared;)
+ (MMPrintManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 添加打印任务
/// \param tasks 任务数组
///
/// \param device 设备
///
///
/// returns:
/// ()
- (void)addTaskWithTasks:(NSArray<MMPrintTask *> * _Nonnull)tasks;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MMPrintPaperType, "MMPrintPaperType", closed) {
  MMPrintPaperTypeNormal = 0,
  MMPrintPaperTypeLabel = 1,
};


SWIFT_CLASS("_TtC11MMDeviceKit11MMPrintTask")
@interface MMPrintTask : NSObject
/// 打印内容
@property (nonatomic, strong) MMPrintContent * _Nullable content;
/// 打印配置
@property (nonatomic, strong) MMPrintConfig * _Nullable config;
/// 目标设备
@property (nonatomic, readonly, strong) MMDevice * _Nullable device;
/// 数据ID，用于后续读取沙盒缓存
@property (nonatomic, copy) NSString * _Nonnull dataId;
/// 已经打印多少份
@property (nonatomic) NSInteger printedCount;
/// 数据总大小（单个*份数）
@property (nonatomic) double dataSize;
- (nonnull instancetype)initWithContent:(MMPrintContent * _Nonnull)content config:(MMPrintConfig * _Nonnull)config device:(MMDevice * _Nonnull)device OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11MMDeviceKit17MMTomatoInfoModel")
@interface MMTomatoInfoModel : NSObject
@property (nonatomic) NSInteger month;
@property (nonatomic) NSInteger day;
@property (nonatomic) NSInteger year;
@property (nonatomic) NSInteger count;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11MMDeviceKit17NotificationNames")
@interface NotificationNames : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NotificationNames (SWIFT_EXTENSION(MMDeviceKit))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setTomatoNoteSuccessNotification;)
+ (NSString * _Nonnull)setTomatoNoteSuccessNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setTomatoNoteFailedNotification;)
+ (NSString * _Nonnull)setTomatoNoteFailedNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setAlarmNoteSuccessNotification;)
+ (NSString * _Nonnull)setAlarmNoteSuccessNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setAlarmNoteFailedNotification;)
+ (NSString * _Nonnull)setAlarmNoteFailedNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setAlarmTimeSuccessNotification;)
+ (NSString * _Nonnull)setAlarmTimeSuccessNotification SWIFT_WARN_UNUSED_RESULT;
@end


@interface NotificationNames (SWIFT_EXTENSION(MMDeviceKit))
/// 设置词书成功
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setDictionarySuccessNotification;)
+ (NSString * _Nonnull)setDictionarySuccessNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setDictionaryFailNotification;)
+ (NSString * _Nonnull)setDictionaryFailNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setDictionaryProgressNotification;)
+ (NSString * _Nonnull)setDictionaryProgressNotification SWIFT_WARN_UNUSED_RESULT;
/// 设置词书状态成功
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setDictionaryStatusSuccessNotification;)
+ (NSString * _Nonnull)setDictionaryStatusSuccessNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setDictionaryStatusFailNotification;)
+ (NSString * _Nonnull)setDictionaryStatusFailNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vocabularyCardResetNotification;)
+ (NSString * _Nonnull)vocabularyCardResetNotification SWIFT_WARN_UNUSED_RESULT;
@end


@interface NotificationNames (SWIFT_EXTENSION(MMDeviceKit))
/// The central manager whose state has changed.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMCentralManagerDidUpdateStateNotification;)
+ (NSString * _Nonnull)MMCentralManagerDidUpdateStateNotification SWIFT_WARN_UNUSED_RESULT;
/// Discover Paperang device notification with the device object
/// {
/// @“device”:MMDevice object,
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDidDiscoverDeviceNotification;)
+ (NSString * _Nonnull)MMDidDiscoverDeviceNotification SWIFT_WARN_UNUSED_RESULT;
/// Will connect to Paperang device notification
/// {
/// @“device”:MMDevice object
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMWillUseDeviceNotification;)
+ (NSString * _Nonnull)MMWillUseDeviceNotification SWIFT_WARN_UNUSED_RESULT;
/// Connected to Paperang device notification
/// {
/// @“device”:MMDevice object
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDeviceUsableNotification;)
+ (NSString * _Nonnull)MMDeviceUsableNotification SWIFT_WARN_UNUSED_RESULT;
/// Connect to Paperang device failed notification
/// Autoconnect may cause device nil, use “mac” to identify the device
/// {
/// @“errorCode”: FailUseDeviceCode,
/// @“errorMsg”:error message
/// @“device”:MMDevice object
/// @“mac”:failuse device mac
/// }
/// code:
/// -1  Cannot recognize the device
/// -2  Disallow connection to the device
/// -3  Connection timeout
/// -4  The specified device has disconnected from us
/// -5  Double click to disconnect bluetooth
/// 313 Enable the device with Internet
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDidFailToUseDeviceNotification;)
+ (NSString * _Nonnull)MMDidFailToUseDeviceNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDidFailToUseDeviceNotificationOC;)
+ (NSString * _Nonnull)MMDidFailToUseDeviceNotificationOC SWIFT_WARN_UNUSED_RESULT;
/// Will transmit data notification
/// {
/// @“device”:MMDevice object
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMWillSendPrintDataNotification;)
+ (NSString * _Nonnull)MMWillSendPrintDataNotification SWIFT_WARN_UNUSED_RESULT;
/// Data transmission completed notification
/// {
/// @“device”:MMDevice object
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDidSendPrintDataNotification;)
+ (NSString * _Nonnull)MMDidSendPrintDataNotification SWIFT_WARN_UNUSED_RESULT;
/// Print completed notification
/// {
/// @“device”:MMDevice object
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDidFinishPrintNotification;)
+ (NSString * _Nonnull)MMDidFinishPrintNotification SWIFT_WARN_UNUSED_RESULT;
/// Device abnormal data:
/// {
/// @“device”:MMDevice object
/// @“exceptions”:exceptionCode as array
/// }
/// code:
/// -1 No battery
/// -2 Low battery
/// -3 Overheat
/// -4 No paper
/// -5 Lid open
/// 0 None
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDeviceExceptionStatusNotification;)
+ (NSString * _Nonnull)MMDeviceExceptionStatusNotification SWIFT_WARN_UNUSED_RESULT;
/// Device info received  notification
/// {
/// @“device”:MMDevice object
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDeviceInfoDidReceivedNotification;)
+ (NSString * _Nonnull)MMDeviceInfoDidReceivedNotification SWIFT_WARN_UNUSED_RESULT;
/// all info include firmware
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDeviceInfoAllCheckNotification;)
+ (NSString * _Nonnull)MMDeviceInfoAllCheckNotification SWIFT_WARN_UNUSED_RESULT;
/// Device firm did send  last packet notification
/// {
/// @“device”:MMDevice object
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDeviceFirmDidSendNotification;)
+ (NSString * _Nonnull)MMDeviceFirmDidSendNotification SWIFT_WARN_UNUSED_RESULT;
/// Device firm did update  notification
/// {
/// @“device”:MMDevice object
/// @“oldVersion”:MMDevice old version
/// @“currentVersion”:MMDevice current version
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDeviceFirmDidUpdateNotification;)
+ (NSString * _Nonnull)MMDeviceFirmDidUpdateNotification SWIFT_WARN_UNUSED_RESULT;
/// Device firm did send  notification
/// {
/// @“device”:MMDevice object
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDeviceFirmFailUpdateNotification;)
+ (NSString * _Nonnull)MMDeviceFirmFailUpdateNotification SWIFT_WARN_UNUSED_RESULT;
/// Device file  send  progress
/// {
/// @“device”:MMDevice object
/// @“progress”:file send progress
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDeviceFileSendProgressNotification;)
+ (NSString * _Nonnull)MMDeviceFileSendProgressNotification SWIFT_WARN_UNUSED_RESULT;
/// Machine can be upgraded
/// {
/// @“device”:MMDevice object
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDeviceNeedUpgradeNotification;)
+ (NSString * _Nonnull)MMDeviceNeedUpgradeNotification SWIFT_WARN_UNUSED_RESULT;
/// Paper length consumed
/// {
/// @“device”:MMDevice object
/// @“length”:xx mm
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDeviceConsumeChangedNotification;)
+ (NSString * _Nonnull)MMDeviceConsumeChangedNotification SWIFT_WARN_UNUSED_RESULT;
@end


@interface NotificationNames (SWIFT_EXTENSION(MMDeviceKit))
/// 获取SN
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getSNNotificationName;)
+ (NSString * _Nonnull)getSNNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取硬件版本
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getBtVersionNotificationName;)
+ (NSString * _Nonnull)getBtVersionNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取软件版本
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getFirmVersionNotificationName;)
+ (NSString * _Nonnull)getFirmVersionNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取设备类型
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getDeviceTypeNotificationName;)
+ (NSString * _Nonnull)getDeviceTypeNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取协议版本
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getDelegateVersionNotificationName;)
+ (NSString * _Nonnull)getDelegateVersionNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取绑定信息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getBindDataNotificationName;)
+ (NSString * _Nonnull)getBindDataNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 云盒子设备断开连接，{“userDisconnect”:xx}
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull willConnectCloudDeviceDisconnectNotificationName;)
+ (NSString * _Nonnull)willConnectCloudDeviceDisconnectNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 收到系统信息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getCloudDeviceInfoNotificationName;)
+ (NSString * _Nonnull)getCloudDeviceInfoNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 设置设备绑定信息。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull changeBindDataNotificationName;)
+ (NSString * _Nonnull)changeBindDataNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 关闭蓝牙。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull closeBTNotificationName;)
+ (NSString * _Nonnull)closeBTNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获得WiFiList
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getWifiListNotificationName;)
+ (NSString * _Nonnull)getWifiListNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 连接WiFi结果, {“status”:xx,“msg”:xxx}0x01 表示配网成功,0x02 表示配网失败，其他错误,0x03 表示配网失败，密码错误
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull connectWifiResultNotificationName;)
+ (NSString * _Nonnull)connectWifiResultNotificationName SWIFT_WARN_UNUSED_RESULT;
/// WiFi状态，{“status”:xx,“wifiName”:xx,“rssi”:xx}
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getWifiStatusNotificationName;)
+ (NSString * _Nonnull)getWifiStatusNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 网口状态
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getNetworkPortStatusNotificationName;)
+ (NSString * _Nonnull)getNetworkPortStatusNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 服务器状态
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getServerStatusNotificationName;)
+ (NSString * _Nonnull)getServerStatusNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 主动上报已连接服务器
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull submitConnectedServerNotificationName;)
+ (NSString * _Nonnull)submitConnectedServerNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 认证失败
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull verifyFaildNotificationName;)
+ (NSString * _Nonnull)verifyFaildNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 认证成功
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull verifySuccessNotificationName;)
+ (NSString * _Nonnull)verifySuccessNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 升级指令回应
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull upgradeDeviceNotificationName;)
+ (NSString * _Nonnull)upgradeDeviceNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 更新关机时间成功
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DeviceDidUpdatePowerOffTimeNotificationName;)
+ (NSString * _Nonnull)DeviceDidUpdatePowerOffTimeNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 更新关机时间失败
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DeviceFailUpdatePowerOffTimeNotificationName;)
+ (NSString * _Nonnull)DeviceFailUpdatePowerOffTimeNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获得关机时间
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DeviceReceivePowerOffTimeNotificationName;)
+ (NSString * _Nonnull)DeviceReceivePowerOffTimeNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获得电量
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DeviceReceiveBatteryNotificationName;)
+ (NSString * _Nonnull)DeviceReceiveBatteryNotificationName SWIFT_WARN_UNUSED_RESULT;
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef MMDEVICEKIT_SWIFT_H
#define MMDEVICEKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MMDeviceKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM_NAMED(NSInteger, BluetoothState, "BluetoothState", closed) {
  BluetoothStateUnknown = 0,
  BluetoothStateResetting = 1,
  BluetoothStateUnsupported = 2,
  BluetoothStateUnauthorized = 3,
  BluetoothStatePoweredOff = 4,
  BluetoothStatePoweredOn = 5,
};

typedef SWIFT_ENUM(NSInteger, FailUseDeviceCode, closed) {
  FailUseDeviceCodeIgnore = 0,
  FailUseDeviceCodeUnrecognize = -1,
  FailUseDeviceCodeDisallow = -2,
  FailUseDeviceCodeConnectFail = -3,
  FailUseDeviceCodeDeviceDisconnect = -4,
  FailUseDeviceCodeCmdDisconnect = -5,
  FailUseDeviceCodeNetworkError = 313,
  FailUseDeviceCodeUnowned = 314,
};

@class NSString;
@class NSNumber;

SWIFT_CLASS("_TtC11MMDeviceKit8MMDevice")
@interface MMDevice : NSObject
@property (nonatomic, copy) NSString * _Nullable deviceName;
@property (nonatomic, copy) NSString * _Nullable deviceType;
@property (nonatomic, copy) NSString * _Nullable snCode;
@property (nonatomic, copy) NSString * _Nullable alias;
@property (nonatomic, copy) NSString * _Nullable MacAdress;
@property (nonatomic, copy) NSString * _Nullable readableMacAdress;
@property (nonatomic) uint16_t offtime;
@property (nonatomic) uint8_t battery;
@property (nonatomic, copy) NSString * _Nullable firmVersion;
@property (nonatomic, copy) NSString * _Nullable firmVersionNew;
@property (nonatomic, copy) NSString * _Nullable firmDownloadPath;
@property (nonatomic, copy) NSString * _Nullable firmVerifyMD5;
@property (nonatomic, copy) NSString * _Nullable firmUpdateDescription;
@property (nonatomic) BOOL needUpgrade;
@property (nonatomic) BOOL forceUpdate;
@property (nonatomic) NSInteger maxPackageLength;
@property (nonatomic) NSInteger maxPackageCount;
@property (nonatomic) uint16_t maxWidth;
@property (nonatomic) uint16_t imageWidth;
@property (nonatomic) uint16_t bottomFeedLine;
- (BOOL)isConnected SWIFT_WARN_UNUSED_RESULT;
/// 服务端校验的 code
@property (nonatomic, copy) NSString * _Nonnull serverCode;
/// 服务端校验的 sign
@property (nonatomic, copy) NSString * _Nonnull serverSign;
- (void)setValue:(id _Nullable)value forUndefinedKey:(NSString * _Nonnull)key;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CBCharacteristic;

SWIFT_CLASS("_TtC11MMDeviceKit12MMGattDevice")
@interface MMGattDevice : MMDevice
@property (nonatomic, copy) NSString * _Nullable uuid;
@property (nonatomic, strong) NSNumber * _Nullable rssi;
@property (nonatomic) double vol;
@property (nonatomic, copy) NSString * _Nullable btVersion;
@property (nonatomic) double temperature;
@property (nonatomic, strong) CBCharacteristic * _Nullable writeCharacteristic;
@property (nonatomic, copy) NSString * _Nullable writeCharacteristicString;
@property (nonatomic, copy) NSString * _Nullable btCharacteristicString;
@property (nonatomic, copy) NSString * _Nullable mcuCharacteristicString;
@property (nonatomic, copy) NSString * _Nullable bindInfo;
@property (nonatomic) uint16_t supportDpi;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable supportColour;
@property (nonatomic) uint8_t density;
@property (nonatomic) BOOL supportBreakpoointResume;
- (void)setValue:(id _Nullable)value forUndefinedKey:(NSString * _Nonnull)key;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSArray<NSNumber *> * _Nonnull)getSupportSizeOC SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11MMDeviceKit11IBangDevice")
@interface IBangDevice : MMGattDevice
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11MMDeviceKit16MMAlarmInfoModel")
@interface MMAlarmInfoModel : NSObject
@property (nonatomic) NSInteger hour;
@property (nonatomic) NSInteger minute;
@property (nonatomic) NSInteger second;
@property (nonatomic) NSInteger cycle;
@property (nonatomic) BOOL isOpen;
@property (nonatomic) uint8_t openAndOrder;
/// 新a5协议 代表alarmid
@property (nonatomic) NSInteger alarmId;
/// 新协议 0（关闭） 默认铃声1（打开）
@property (nonatomic) NSInteger bellsType;
/// 是否延时提醒
@property (nonatomic) BOOL isDelayAlarm;
@property (nonatomic, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(uint8_t, MMAlarmToneType, "MMAlarmToneType", closed) {
  MMAlarmToneTypeKeytone = 0x01,
  MMAlarmToneTypeTimer = 0x02,
  MMAlarmToneTypeAlarm = 0x03,
  MMAlarmToneTypeTomato = 0x04,
};


SWIFT_CLASS("_TtC11MMDeviceKit22MMBLENotificationModel")
@interface MMBLENotificationModel : NSObject
/// 通知名
@property (nonatomic, copy) NSString * _Nullable notificationName;
/// 该事件是否成功
@property (nonatomic) BOOL isSuccess;
/// 其他信息
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable otherInfo;
/// 设备模型
@property (nonatomic, strong) MMDevice * _Nullable device;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MMTomatoInfoModel;

SWIFT_CLASS("_TtC11MMDeviceKit13MMClockDevice")
@interface MMClockDevice : MMGattDevice
/// 是否是24小时制
@property (nonatomic) BOOL is24Hour;
/// 按键音开关
@property (nonatomic) BOOL isKeySoundOpen;
/// 番茄音开关
@property (nonatomic) BOOL isTomatoSoundOpen;
/// 计时音开关
@property (nonatomic) BOOL isCountdownSoundOpen;
/// 关机闹钟开关
@property (nonatomic) BOOL isPowerOffAlarm;
/// 番茄纸条开关
@property (nonatomic) BOOL isTomatoNoteOpen;
/// 闹钟纸条开关
@property (nonatomic) BOOL isAlarmNoteOpen;
/// 工作时间
@property (nonatomic) NSInteger workMinute;
/// 休息时间
@property (nonatomic) NSInteger breakMinute;
/// 番茄音
@property (nonatomic) NSInteger tomatoBell;
/// 计时音类型
@property (nonatomic) NSInteger countdownBell;
/// 熄屏时间，单位秒
@property (nonatomic) NSInteger suspendSecond;
///
@property (nonatomic, copy) NSArray<MMAlarmInfoModel *> * _Nonnull alarmsArray;
///
@property (nonatomic, copy) NSArray<MMTomatoInfoModel *> * _Nonnull tomatosArray;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11MMDeviceKit13MMCloudDevice")
@interface MMCloudDevice : MMDevice
@property (nonatomic, copy) NSString * _Nullable ram;
@property (nonatomic, copy) NSString * _Nullable rom;
@property (nonatomic, copy) NSString * _Nullable bindInfo;
@property (nonatomic, copy) NSString * _Nullable delegate;
@property (nonatomic, copy) NSString * _Nullable printerName;
@property (nonatomic, copy) NSString * _Nullable shareUserNickName;
@property (nonatomic, copy) NSString * _Nullable selectDate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MMCloudPrinter;

SWIFT_CLASS("_TtC11MMDeviceKit16MMCloudBoxDevice")
@interface MMCloudBoxDevice : MMCloudDevice
@property (nonatomic, copy) NSArray<MMCloudPrinter *> * _Nonnull printerList;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(uint8_t, MMCloudConnectWifiResult, "MMCloudConnectWifiResult", closed) {
  MMCloudConnectWifiResultSuccess = 0x01,
  MMCloudConnectWifiResultOtherError = 0x02,
  MMCloudConnectWifiResultPasswordError = 0x03,
};


typedef SWIFT_ENUM_NAMED(uint8_t, MMCloudNetworkPortStatus, "MMCloudNetworkPortStatus", closed) {
  MMCloudNetworkPortStatusUnConnect = 0x00,
  MMCloudNetworkPortStatusConnecting = 0x01,
  MMCloudNetworkPortStatusConnected = 0x02,
};


SWIFT_CLASS("_TtC11MMDeviceKit14MMCloudPrinter")
@interface MMCloudPrinter : MMCloudDevice
@property (nonatomic, copy) NSString * _Nullable pageSize;
@property (nonatomic, copy) NSString * _Nullable mediaType;
@property (nonatomic, copy) NSString * _Nullable paperState;
@property (nonatomic) NSInteger inkLevel;
@property (nonatomic) NSInteger error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(uint8_t, MMCloudServerStatus, "MMCloudServerStatus", closed) {
  MMCloudServerStatusUnConnect = 0x00,
  MMCloudServerStatusConnecting = 0x01,
  MMCloudServerStatusConnected = 0x02,
};

typedef SWIFT_ENUM_NAMED(uint8_t, MMCloudWifiStatus, "MMCloudWifiStatus", closed) {
  MMCloudWifiStatusIdle = 0x00,
  MMCloudWifiStatusConnecting = 1,
  MMCloudWifiStatusConnectFaild = 2,
  MMCloudWifiStatusPassError = 3,
  MMCloudWifiStatusConnectSuccess = 0x04,
  MMCloudWifiStatusDisConnect = 0x05,
  MMCloudWifiStatusWifiOpen = 6,
  MMCloudWifiStatusWifiClose = 7,
};


SWIFT_CLASS("_TtC11MMDeviceKit8MMConfig")
@interface MMConfig : NSObject
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MMConfig * _Nonnull shared;)
+ (MMConfig * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 是否打印日志
@property (nonatomic) BOOL showLog;
/// 搜索设备的名字黑名单
@property (nonatomic, copy) NSArray<NSString *> * _Nullable unEnableNameArray;
/// 获取外部userID，用于P2S
@property (nonatomic, copy) NSString * _Nonnull (^ _Nullable getUserId)(void);
/// 蓝牙关闭
@property (nonatomic, copy) void (^ _Nullable blePoweredOff)(void);
/// 意外断开
@property (nonatomic, copy) void (^ _Nullable accidentDisconnect)(void);
/// 打印机状态
@property (nonatomic, copy) void (^ _Nullable helperViewSetStatuBlock)(NSInteger);
/// 双击按钮断开
@property (nonatomic, copy) void (^ _Nullable handleDisconnectBTCmdBlock)(void);
/// 注册设备参数
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable (^ _Nullable registDevicePara)(MMDevice * _Nullable);
/// 注册成功
@property (nonatomic, copy) void (^ _Nullable handleRegistDeviceSuccessShowHudBlock)(void);
/// 是否需要检查升级
@property (nonatomic, copy) BOOL (^ _Nullable shouldUpdateBlock)(MMDevice * _Nullable);
/// 注册成功后，处理纸张
@property (nonatomic, copy) void (^ _Nullable handlePaperAfterRegistDeviceBlock)(MMDevice * _Nullable);
/// 注册流程全部完成
@property (nonatomic, copy) void (^ _Nullable registFinish)(MMDevice * _Nullable);
/// 打印图片但是没连接设备时
@property (nonatomic, copy) void (^ _Nullable printImageButNotConnect)(MMDevice * _Nullable);
/// 打印成功
@property (nonatomic, copy) void (^ _Nullable handlePrintImageSuccessBlock)(void);
/// 升级成功
@property (nonatomic, copy) void (^ _Nullable didUpdateSuccessBlock)(void);
/// 是否支持平级升级
@property (nonatomic) BOOL isAllowUpgradeWhenEqual;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11MMDeviceKit17MMConfigNetDevice")
@interface MMConfigNetDevice : MMGattDevice
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class UIImage;
@class NSData;
@class MMPrintTask;

SWIFT_CLASS("_TtC11MMDeviceKit11MMDeviceApi")
@interface MMDeviceApi : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MMDevice * _Nullable mainDevice;)
+ (MMDevice * _Nullable)mainDevice SWIFT_WARN_UNUSED_RESULT;
/// 是否捕获并上传崩溃信息，默认为true，若开启会影响其他第三方库的crash捕获
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL crashUpload;)
+ (BOOL)crashUpload SWIFT_WARN_UNUSED_RESULT;
+ (void)setCrashUpload:(BOOL)value;
/// 注册 MMDeviceKit , 注册成功立刻开启蓝牙扫描
+ (void)regist:(NSString * _Nullable)appKey :(NSString * _Nullable)appSecret :(long)appID :(void (^ _Nullable)(void))success :(void (^ _Nullable)(NSInteger, NSString * _Nullable))fail;
/// 注册 MMDeviceKit , 不开启蓝牙扫描
+ (void)registWithoutScan:(NSString * _Nullable)appKey :(NSString * _Nullable)appSecret :(long)appID :(void (^ _Nullable)(void))success :(void (^ _Nullable)(NSInteger, NSString * _Nullable))fail;
+ (NSString * _Nonnull)getSdkVersion SWIFT_WARN_UNUSED_RESULT;
/// SDK是否已经认证
+ (BOOL)isAuthorized SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)getBluetoothAuthorizationStatus SWIFT_WARN_UNUSED_RESULT;
+ (void)showLog:(BOOL)showLog;
+ (void)setScanOvertime:(NSTimeInterval)overtime;
+ (void)autoReconnect:(BOOL)autoReconnect;
+ (enum BluetoothState)getGattState SWIFT_WARN_UNUSED_RESULT;
+ (uint8_t)getDensity:(MMDevice * _Nullable)device SWIFT_WARN_UNUSED_RESULT;
+ (void)getAvailableDevices:(void (^ _Nonnull)(NSArray<MMDevice *> * _Nonnull))devicesHandle;
+ (void)startGattScan:(void (^ _Nonnull)(NSArray<MMDevice *> * _Nonnull))devicesHandle;
+ (void)stopFetchDevice;
+ (NSArray<MMDevice *> * _Nonnull)getUsingDevices SWIFT_WARN_UNUSED_RESULT;
+ (void)useDevice:(MMDevice * _Nullable)device;
+ (void)useDeviceWithMac:(NSString * _Nullable)mac;
+ (void)unuseDevice:(MMDevice * _Nullable)device;
+ (MMDevice * _Nullable)getDevice:(NSString * _Nullable)mac SWIFT_WARN_UNUSED_RESULT;
+ (void)unuseDeviceWithoutResponse:(MMDevice * _Nullable)device;
+ (void)print:(MMDevice * _Nullable)device :(UIImage * _Nullable)image :(BOOL)isMono :(NSInteger)copy;
/// 标签打印
+ (void)printLabel:(MMDevice * _Nullable)device :(UIImage * _Nullable)image :(BOOL)isMono :(NSInteger)copy;
+ (void)printData:(MMDevice * _Nullable)device :(NSData * _Nullable)data :(NSInteger)copy;
+ (void)addPrintTask:(MMPrintTask * _Nullable)task;
+ (void)printTestPaper:(MMGattDevice * _Nullable)device;
+ (void)updateGattDevice:(MMGattDevice * _Nullable)device :(NSData * _Nullable)firm;
+ (void)setPowerOffTime:(MMDevice * _Nullable)device :(uint16_t)interval;
+ (void)setDensity:(MMDevice * _Nullable)device :(uint8_t)density;
+ (void)setSense:(MMDevice * _Nullable)device :(uint32_t)sense;
+ (void)getBattery:(MMDevice * _Nullable)device :(void (^ _Nullable)(MMDevice * _Nullable, uint8_t))complete;
+ (void)getWifiList:(MMDevice * _Nullable)device;
+ (void)checkPortsStatus:(MMDevice * _Nullable)device;
+ (void)configWifiWithSsid:(NSString * _Nullable)ssid password:(NSString * _Nullable)password device:(MMDevice * _Nullable)device;
+ (void)connectedServer:(MMDevice * _Nullable)device;
+ (void)closeBluetooth:(MMDevice * _Nullable)device;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface MMDeviceApi (SWIFT_EXTENSION(MMDeviceKit))
/// 获取机器闹钟相关信息
/// return: MMClockDevice
+ (void)getClockInfo:(MMDevice * _Nullable)device complete:(void (^ _Nullable)(MMClockDevice * _Nonnull))complete;
/// 设置时间 2021 4 28 21 3 0
+ (void)setDeviceTime:(MMDevice * _Nullable)device year:(NSInteger)year month:(NSInteger)month day:(NSInteger)day hours:(NSInteger)hours minute:(NSInteger)minute second:(NSInteger)second;
/// 设置小时制
+ (void)setTimeMode:(MMDevice * _Nullable)device is24Hour:(BOOL)is24Hour;
/// 添加/更新闹钟
/// @param model model description
+ (void)updateAlarm:(MMDevice * _Nullable)device model:(MMAlarmInfoModel * _Nonnull)model;
/// 删除闹钟 确保旧协议有正确的alarmId(添加后从设备重新获取)
/// @param model model description
+ (void)deleteAlarm:(MMDevice * _Nullable)device alarmId:(uint32_t)alarmId;
/// 设置关机闹钟开关
/// @param isOpen 是否打开
+ (void)setPowerOffAlarm:(MMDevice * _Nullable)device isOpen:(BOOL)isOpen;
/// 设置熄屏时间,单位为秒
+ (void)setSuspendTimeSecond:(MMDevice * _Nullable)device second:(NSInteger)second;
/// 设置番茄时钟工作/休息时间,单位为分钟
+ (void)setTomatoClockTime:(MMDevice * _Nullable)device worktime:(NSInteger)worktime breaktime:(NSInteger)breaktime;
/// 设置番茄钟提醒纸条开关
+ (void)setTomatoNoteOpen:(MMDevice * _Nullable)device isOpen:(BOOL)isOpen;
/// 设置番茄钟提醒纸条数据
+ (void)setTomatoNote:(MMDevice * _Nullable)device image:(UIImage * _Nullable)image;
/// 设置闹钟提醒纸条开关
+ (void)setAlarmNoteOpen:(MMDevice * _Nullable)device isOpen:(BOOL)isOpen;
/// 设置闹钟提醒纸条数据
+ (void)setAlarmNote:(MMDevice * _Nullable)device image:(UIImage * _Nullable)image;
/// 设置按键音
+ (void)setKeySoundOpen:(MMDevice * _Nullable)device isOpen:(BOOL)isOpen;
/// 设置计时提示音
+ (void)setTimerSoundOpen:(MMDevice * _Nullable)device isOpen:(BOOL)isOpen;
/// 设置闹钟提示音
+ (void)setAlarmSoundOpen:(MMDevice * _Nullable)device isOpen:(BOOL)isOpen;
/// 设置番茄时钟提示音
+ (void)setTomatoSoundOpen:(MMDevice * _Nullable)device isOpen:(BOOL)isOpen;
/// 设置闹钟延时提醒时间,单位为分钟
+ (void)setAlarmDelayTimeWithMinutes:(MMDevice * _Nullable)device minutes:(NSInteger)minutes;
+ (void)bindDevice:(MMDevice * _Nullable)device :(NSString * _Nonnull)key;
+ (void)unbindDevice:(MMDevice * _Nullable)device :(void (^ _Nonnull)(BOOL))complete;
/// 告知同步状态
+ (void)noticeSyncTaskStatus:(MMGattDevice * _Nullable)device start:(BOOL)start;
+ (void)test:(MMGattDevice * _Nullable)device;
@end


SWIFT_CLASS("_TtC11MMDeviceKit15MMDeviceNetwork")
@interface MMDeviceNetwork : NSObject
+ (void)config:(NSString * _Nonnull)appKey :(NSString * _Nonnull)appSecret :(long)appID;
+ (void)post2OCWith:(NSString * _Nonnull)request parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters complete:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nonnull))complete failure:(void (^ _Nullable)(NSInteger, NSString * _Nullable))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC11MMDeviceKit21MMNotificationStrings")
@interface MMNotificationStrings : NSObject
/// 打印数据大小变化
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull printDataSizeChangeNotificationName;)
+ (NSString * _Nonnull)printDataSizeChangeNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 所有图片都打印完成
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull printFinishNotificationName;)
+ (NSString * _Nonnull)printFinishNotificationName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum MMPrintPaperType : NSInteger;

SWIFT_CLASS("_TtC11MMDeviceKit13MMPrintConfig")
@interface MMPrintConfig : NSObject
@property (nonatomic) CGFloat targetWidth;
@property (nonatomic) NSInteger supportDpi;
@property (nonatomic) uint8_t precision;
@property (nonatomic) uint16_t width;
@property (nonatomic) uint16_t maxWidth;
@property (nonatomic) uint16_t offset;
@property (nonatomic) uint8_t isCompress;
/// 打印类型
@property (nonatomic) enum MMPrintPaperType paperType;
/// 份数
@property (nonatomic) NSInteger count;
/// 是否打印头部走纸
@property (nonatomic) BOOL printTopFeed;
@property (nonatomic) uint16_t topFeed;
@property (nonatomic, readonly) NSInteger labelFeedLineOld;
@property (nonatomic, readonly) uint32_t labelFeedLine;
/// 是否打印底部走纸
@property (nonatomic) BOOL printBottomFeed;
@property (nonatomic) uint16_t bottomFeed;
- (void)configWith:(MMDevice * _Nonnull)device;
- (void)configTargetWidthAndOffset:(NSInteger)targetSize :(MMGattDevice * _Nonnull)device;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11MMDeviceKit14MMPrintContent")
@interface MMPrintContent : NSObject
/// 单张图片,加入队列后自动清空
@property (nonatomic, copy) NSString * _Nullable imagePath;
/// 是否单色图
@property (nonatomic) BOOL isMono;
@property (nonatomic, copy) NSArray<NSValue *> * _Nullable points;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image isMono:(BOOL)isMono OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11MMDeviceKit14MMPrintManager")
@interface MMPrintManager : NSObject
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MMPrintManager * _Nonnull shared;)
+ (MMPrintManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 添加打印任务
/// \param tasks 任务数组
///
/// \param device 设备
///
///
/// returns:
/// ()
- (void)addTaskWithTasks:(NSArray<MMPrintTask *> * _Nonnull)tasks;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MMPrintPaperType, "MMPrintPaperType", closed) {
  MMPrintPaperTypeNormal = 0,
  MMPrintPaperTypeLabel = 1,
};


SWIFT_CLASS("_TtC11MMDeviceKit11MMPrintTask")
@interface MMPrintTask : NSObject
/// 打印内容
@property (nonatomic, strong) MMPrintContent * _Nullable content;
/// 打印配置
@property (nonatomic, strong) MMPrintConfig * _Nullable config;
/// 目标设备
@property (nonatomic, readonly, strong) MMDevice * _Nullable device;
/// 数据ID，用于后续读取沙盒缓存
@property (nonatomic, copy) NSString * _Nonnull dataId;
/// 已经打印多少份
@property (nonatomic) NSInteger printedCount;
/// 数据总大小（单个*份数）
@property (nonatomic) double dataSize;
- (nonnull instancetype)initWithContent:(MMPrintContent * _Nonnull)content config:(MMPrintConfig * _Nonnull)config device:(MMDevice * _Nonnull)device OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11MMDeviceKit17MMTomatoInfoModel")
@interface MMTomatoInfoModel : NSObject
@property (nonatomic) NSInteger month;
@property (nonatomic) NSInteger day;
@property (nonatomic) NSInteger year;
@property (nonatomic) NSInteger count;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11MMDeviceKit17NotificationNames")
@interface NotificationNames : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NotificationNames (SWIFT_EXTENSION(MMDeviceKit))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setTomatoNoteSuccessNotification;)
+ (NSString * _Nonnull)setTomatoNoteSuccessNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setTomatoNoteFailedNotification;)
+ (NSString * _Nonnull)setTomatoNoteFailedNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setAlarmNoteSuccessNotification;)
+ (NSString * _Nonnull)setAlarmNoteSuccessNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setAlarmNoteFailedNotification;)
+ (NSString * _Nonnull)setAlarmNoteFailedNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setAlarmTimeSuccessNotification;)
+ (NSString * _Nonnull)setAlarmTimeSuccessNotification SWIFT_WARN_UNUSED_RESULT;
@end


@interface NotificationNames (SWIFT_EXTENSION(MMDeviceKit))
/// 设置词书成功
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setDictionarySuccessNotification;)
+ (NSString * _Nonnull)setDictionarySuccessNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setDictionaryFailNotification;)
+ (NSString * _Nonnull)setDictionaryFailNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setDictionaryProgressNotification;)
+ (NSString * _Nonnull)setDictionaryProgressNotification SWIFT_WARN_UNUSED_RESULT;
/// 设置词书状态成功
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setDictionaryStatusSuccessNotification;)
+ (NSString * _Nonnull)setDictionaryStatusSuccessNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setDictionaryStatusFailNotification;)
+ (NSString * _Nonnull)setDictionaryStatusFailNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vocabularyCardResetNotification;)
+ (NSString * _Nonnull)vocabularyCardResetNotification SWIFT_WARN_UNUSED_RESULT;
@end


@interface NotificationNames (SWIFT_EXTENSION(MMDeviceKit))
/// The central manager whose state has changed.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMCentralManagerDidUpdateStateNotification;)
+ (NSString * _Nonnull)MMCentralManagerDidUpdateStateNotification SWIFT_WARN_UNUSED_RESULT;
/// Discover Paperang device notification with the device object
/// {
/// @“device”:MMDevice object,
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDidDiscoverDeviceNotification;)
+ (NSString * _Nonnull)MMDidDiscoverDeviceNotification SWIFT_WARN_UNUSED_RESULT;
/// Will connect to Paperang device notification
/// {
/// @“device”:MMDevice object
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMWillUseDeviceNotification;)
+ (NSString * _Nonnull)MMWillUseDeviceNotification SWIFT_WARN_UNUSED_RESULT;
/// Connected to Paperang device notification
/// {
/// @“device”:MMDevice object
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDeviceUsableNotification;)
+ (NSString * _Nonnull)MMDeviceUsableNotification SWIFT_WARN_UNUSED_RESULT;
/// Connect to Paperang device failed notification
/// Autoconnect may cause device nil, use “mac” to identify the device
/// {
/// @“errorCode”: FailUseDeviceCode,
/// @“errorMsg”:error message
/// @“device”:MMDevice object
/// @“mac”:failuse device mac
/// }
/// code:
/// -1  Cannot recognize the device
/// -2  Disallow connection to the device
/// -3  Connection timeout
/// -4  The specified device has disconnected from us
/// -5  Double click to disconnect bluetooth
/// 313 Enable the device with Internet
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDidFailToUseDeviceNotification;)
+ (NSString * _Nonnull)MMDidFailToUseDeviceNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDidFailToUseDeviceNotificationOC;)
+ (NSString * _Nonnull)MMDidFailToUseDeviceNotificationOC SWIFT_WARN_UNUSED_RESULT;
/// Will transmit data notification
/// {
/// @“device”:MMDevice object
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMWillSendPrintDataNotification;)
+ (NSString * _Nonnull)MMWillSendPrintDataNotification SWIFT_WARN_UNUSED_RESULT;
/// Data transmission completed notification
/// {
/// @“device”:MMDevice object
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDidSendPrintDataNotification;)
+ (NSString * _Nonnull)MMDidSendPrintDataNotification SWIFT_WARN_UNUSED_RESULT;
/// Print completed notification
/// {
/// @“device”:MMDevice object
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDidFinishPrintNotification;)
+ (NSString * _Nonnull)MMDidFinishPrintNotification SWIFT_WARN_UNUSED_RESULT;
/// Device abnormal data:
/// {
/// @“device”:MMDevice object
/// @“exceptions”:exceptionCode as array
/// }
/// code:
/// -1 No battery
/// -2 Low battery
/// -3 Overheat
/// -4 No paper
/// -5 Lid open
/// 0 None
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDeviceExceptionStatusNotification;)
+ (NSString * _Nonnull)MMDeviceExceptionStatusNotification SWIFT_WARN_UNUSED_RESULT;
/// Device info received  notification
/// {
/// @“device”:MMDevice object
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDeviceInfoDidReceivedNotification;)
+ (NSString * _Nonnull)MMDeviceInfoDidReceivedNotification SWIFT_WARN_UNUSED_RESULT;
/// all info include firmware
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDeviceInfoAllCheckNotification;)
+ (NSString * _Nonnull)MMDeviceInfoAllCheckNotification SWIFT_WARN_UNUSED_RESULT;
/// Device firm did send  last packet notification
/// {
/// @“device”:MMDevice object
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDeviceFirmDidSendNotification;)
+ (NSString * _Nonnull)MMDeviceFirmDidSendNotification SWIFT_WARN_UNUSED_RESULT;
/// Device firm did update  notification
/// {
/// @“device”:MMDevice object
/// @“oldVersion”:MMDevice old version
/// @“currentVersion”:MMDevice current version
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDeviceFirmDidUpdateNotification;)
+ (NSString * _Nonnull)MMDeviceFirmDidUpdateNotification SWIFT_WARN_UNUSED_RESULT;
/// Device firm did send  notification
/// {
/// @“device”:MMDevice object
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDeviceFirmFailUpdateNotification;)
+ (NSString * _Nonnull)MMDeviceFirmFailUpdateNotification SWIFT_WARN_UNUSED_RESULT;
/// Device file  send  progress
/// {
/// @“device”:MMDevice object
/// @“progress”:file send progress
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDeviceFileSendProgressNotification;)
+ (NSString * _Nonnull)MMDeviceFileSendProgressNotification SWIFT_WARN_UNUSED_RESULT;
/// Machine can be upgraded
/// {
/// @“device”:MMDevice object
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDeviceNeedUpgradeNotification;)
+ (NSString * _Nonnull)MMDeviceNeedUpgradeNotification SWIFT_WARN_UNUSED_RESULT;
/// Paper length consumed
/// {
/// @“device”:MMDevice object
/// @“length”:xx mm
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMDeviceConsumeChangedNotification;)
+ (NSString * _Nonnull)MMDeviceConsumeChangedNotification SWIFT_WARN_UNUSED_RESULT;
@end


@interface NotificationNames (SWIFT_EXTENSION(MMDeviceKit))
/// 获取SN
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getSNNotificationName;)
+ (NSString * _Nonnull)getSNNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取硬件版本
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getBtVersionNotificationName;)
+ (NSString * _Nonnull)getBtVersionNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取软件版本
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getFirmVersionNotificationName;)
+ (NSString * _Nonnull)getFirmVersionNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取设备类型
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getDeviceTypeNotificationName;)
+ (NSString * _Nonnull)getDeviceTypeNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取协议版本
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getDelegateVersionNotificationName;)
+ (NSString * _Nonnull)getDelegateVersionNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取绑定信息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getBindDataNotificationName;)
+ (NSString * _Nonnull)getBindDataNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 云盒子设备断开连接，{“userDisconnect”:xx}
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull willConnectCloudDeviceDisconnectNotificationName;)
+ (NSString * _Nonnull)willConnectCloudDeviceDisconnectNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 收到系统信息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getCloudDeviceInfoNotificationName;)
+ (NSString * _Nonnull)getCloudDeviceInfoNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 设置设备绑定信息。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull changeBindDataNotificationName;)
+ (NSString * _Nonnull)changeBindDataNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 关闭蓝牙。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull closeBTNotificationName;)
+ (NSString * _Nonnull)closeBTNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获得WiFiList
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getWifiListNotificationName;)
+ (NSString * _Nonnull)getWifiListNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 连接WiFi结果, {“status”:xx,“msg”:xxx}0x01 表示配网成功,0x02 表示配网失败，其他错误,0x03 表示配网失败，密码错误
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull connectWifiResultNotificationName;)
+ (NSString * _Nonnull)connectWifiResultNotificationName SWIFT_WARN_UNUSED_RESULT;
/// WiFi状态，{“status”:xx,“wifiName”:xx,“rssi”:xx}
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getWifiStatusNotificationName;)
+ (NSString * _Nonnull)getWifiStatusNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 网口状态
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getNetworkPortStatusNotificationName;)
+ (NSString * _Nonnull)getNetworkPortStatusNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 服务器状态
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getServerStatusNotificationName;)
+ (NSString * _Nonnull)getServerStatusNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 主动上报已连接服务器
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull submitConnectedServerNotificationName;)
+ (NSString * _Nonnull)submitConnectedServerNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 认证失败
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull verifyFaildNotificationName;)
+ (NSString * _Nonnull)verifyFaildNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 认证成功
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull verifySuccessNotificationName;)
+ (NSString * _Nonnull)verifySuccessNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 升级指令回应
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull upgradeDeviceNotificationName;)
+ (NSString * _Nonnull)upgradeDeviceNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 更新关机时间成功
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DeviceDidUpdatePowerOffTimeNotificationName;)
+ (NSString * _Nonnull)DeviceDidUpdatePowerOffTimeNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 更新关机时间失败
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DeviceFailUpdatePowerOffTimeNotificationName;)
+ (NSString * _Nonnull)DeviceFailUpdatePowerOffTimeNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获得关机时间
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DeviceReceivePowerOffTimeNotificationName;)
+ (NSString * _Nonnull)DeviceReceivePowerOffTimeNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获得电量
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DeviceReceiveBatteryNotificationName;)
+ (NSString * _Nonnull)DeviceReceiveBatteryNotificationName SWIFT_WARN_UNUSED_RESULT;
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
