#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef MMAPI_SWIFT_H
#define MMAPI_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import MMDeviceKit;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MMApi",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSNumber;
@class DeviceMileageModel;

SWIFT_CLASS("_TtC5MMApi20DeviceMileageManager")
@interface DeviceMileageManager : NSObject
/// 查询里程是否允许打印
/// \param sn sn description
///
///
/// returns:
/// description
+ (BOOL)mileageEnableWithSn:(NSString * _Nullable)sn SWIFT_WARN_UNUSED_RESULT;
+ (void)uploadLastTripWithSn:(NSString * _Nullable)sn code:(NSString * _Nullable)code sign:(NSString * _Nullable)sign;
/// 消耗里程(单位统一毫米)
///
/// returns:
/// description
+ (void)reduceMileageWithSn:(NSString * _Nullable)sn length:(double)length code:(NSString * _Nullable)code sign:(NSString * _Nullable)sign completion:(void (^ _Nullable)(BOOL, double))completion;
/// 充值里程
/// \param sn sn description
///
/// \param paperId paperId description
///
/// \param completion completion description
///
///
/// returns:
/// description
+ (void)addMileageWithSn:(NSString * _Nullable)sn paperId:(NSString * _Nullable)paperId completion:(void (^ _Nullable)(BOOL, NSString * _Nullable))completion;
/// 查询本地缓存
/// \param sn sn
///
///
/// returns:
/// description
+ (DeviceMileageModel * _Nullable)getMileageInfoWithSn:(NSString * _Nullable)sn SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;

SWIFT_CLASS("_TtC5MMApi18DeviceMileageModel")
@interface DeviceMileageModel : NSObject
- (void)encodeWith:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, DeviceNeedType, "DeviceNeedType", closed) {
  DeviceNeedTypeNormal = 0,
  DeviceNeedTypeCloud = 1,
  DeviceNeedTypeMobile = 2,
};

@class MMBLESupportSizeModel;

SWIFT_CLASS("_TtC5MMApi22DeviceSelectWidthAlert")
@interface DeviceSelectWidthAlert : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)loadDataWithDefaultType:(MMBLESupportSizeModel * _Nullable)defaultType list:(NSArray<MMBLESupportSizeModel *> * _Nonnull)list;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)show;
- (void)dismiss;
/// 隐藏所有
///
/// returns:
/// description
+ (void)hideAll;
@property (nonatomic, copy) void (^ _Nullable okClick)(MMBLESupportSizeModel * _Nullable);
@end


SWIFT_CLASS("_TtC5MMApi18FreedomRemindAlert")
@interface FreedomRemindAlert : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)show;
@property (nonatomic, copy) void (^ _Nullable okClick)(BOOL);
@end


SWIFT_CLASS("_TtC5MMApi16LayoutConstraint")
@interface LayoutConstraint : NSLayoutConstraint
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface LayoutConstraint (SWIFT_EXTENSION(MMApi))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS_NAMED("MMBLESupportSizeModel")
@interface MMBLESupportSizeModel : NSObject
/// 纸宽
@property (nonatomic) NSInteger paperWidth;
- (void)encodeWith:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWith:(NSInteger)paperWidth OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum PrintPreviewType : NSInteger;

@interface MMBLESupportSizeModel (SWIFT_EXTENSION(MMApi))
@property (nonatomic, readonly) enum PrintPreviewType previewType;
+ (NSDictionary<NSString *, MMBLESupportSizeModel *> * _Nonnull)getCaches SWIFT_WARN_UNUSED_RESULT;
+ (void)addCacheWithSn:(NSString * _Nonnull)sn size:(MMBLESupportSizeModel * _Nonnull)size;
@end


@interface MMDevice (SWIFT_EXTENSION(MMApi))
@property (nonatomic, readonly, copy) NSArray<MMBLESupportSizeModel *> * _Nonnull supportSizeModels;
@end


SWIFT_CLASS("_TtC5MMApi12MMDeviceName")
@interface MMDeviceName : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull x2;)
+ (NSString * _Nonnull)x2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mmj;)
+ (NSString * _Nonnull)mmj SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull p1;)
+ (NSString * _Nonnull)p1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull p1d;)
+ (NSString * _Nonnull)p1d SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull p2;)
+ (NSString * _Nonnull)p2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull p2l;)
+ (NSString * _Nonnull)p2l SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull p2s;)
+ (NSString * _Nonnull)p2s SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull p3;)
+ (NSString * _Nonnull)p3 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull c1;)
+ (NSString * _Nonnull)c1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull c1s;)
+ (NSString * _Nonnull)c1s SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bang;)
+ (NSString * _Nonnull)bang SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull d1;)
+ (NSString * _Nonnull)d1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull d2;)
+ (NSString * _Nonnull)d2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull t1;)
+ (NSString * _Nonnull)t1 SWIFT_WARN_UNUSED_RESULT;
/// 自由设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull freedomDevices;)
+ (NSArray<NSString *> * _Nonnull)freedomDevices SWIFT_WARN_UNUSED_RESULT;
/// 4英寸设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull cDevices;)
+ (NSArray<NSString *> * _Nonnull)cDevices SWIFT_WARN_UNUSED_RESULT;
/// 手机连接设备名称
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull mobileDevices;)
+ (NSArray<NSString *> * _Nonnull)mobileDevices SWIFT_WARN_UNUSED_RESULT;
/// 云设备名称
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull cloudDevices;)
+ (NSArray<NSString *> * _Nonnull)cloudDevices SWIFT_WARN_UNUSED_RESULT;
+ (enum PrintPreviewType)previewtypeWithDeviceName:(NSString * _Nullable)deviceName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

SWIFT_CLASS("_TtC5MMApi20MMDeviceUsageManager")
@interface MMDeviceUsageManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MMDeviceUsageManager * _Nonnull manager;)
+ (MMDeviceUsageManager * _Nonnull)manager SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) MMDevice * _Nullable usingDevice;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull enableDeviceNames;
@property (nonatomic, readonly, copy) NSString * _Nullable lastRecordMac;
@property (nonatomic, copy) void (^ _Nullable fetchDevicesHandle)(NSArray<MMDevice *> * _Nonnull);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 搜索设备
- (void)fetchDevices;
/// 判断该设备是否已连接
/// \param mac mac description
///
///
/// returns:
/// description
- (BOOL)isCurrentConnected SWIFT_WARN_UNUSED_RESULT;
- (void)handleUseDeviceSuccessWithDevice:(MMDevice * _Nullable)device;
- (BOOL)isUpdateMCU SWIFT_WARN_UNUSED_RESULT;
- (void)loadFirm:(NSData * _Nonnull)firm;
/// 是否允许使用
/// \param name 设备名
///
///
/// returns:
/// description
- (BOOL)enable:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS("_TtC5MMApi13NetRequestUrl")
@interface NetRequestUrl : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kUrl_api_config_geturlbyname;)
+ (NSString * _Nonnull)kUrl_api_config_geturlbyname SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NotificationNames (SWIFT_EXTENSION(MMApi))
/// MMBLESupportSizeModel 参数
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMConnectedDevicePrintPreviewType;)
+ (NSString * _Nonnull)MMConnectedDevicePrintPreviewType SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC5MMApi14PrintCloudFile")
@interface PrintCloudFile : NSObject
/// 文档名，用户uid+原文档MD5
@property (nonatomic, copy) NSString * _Nullable fileName;
/// PDF文档，完整URL
@property (nonatomic, copy) NSString * _Nullable fileUrl;
@property (nonatomic) NSInteger pageRangeMin;
@property (nonatomic) NSInteger pageRangeMax;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC5MMApi14PrintDataModel")
@interface PrintDataModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC5MMApi14PrintParaModel")
@interface PrintParaModel : NSObject
@property (nonatomic) BOOL feedline;
@property (nonatomic, copy) NSArray<NSValue *> * _Nonnull points;
@property (nonatomic) BOOL disTop;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, PrintPreviewType, closed) {
  PrintPreviewTypeMm57 = 57,
  PrintPreviewTypeMm80 = 79,
  PrintPreviewTypeMm112 = 110,
  PrintPreviewTypeA4 = 210,
  PrintPreviewTypeTt = 10,
};

@class UIImage;

/// 打印请求类(业务端到ble的中间层)
SWIFT_CLASS("_TtC5MMApi12PrintRequest")
@interface PrintRequest : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<NSString *> * _Nonnull needCloudPrintVCName;)
+ (NSArray<NSString *> * _Nonnull)needCloudPrintVCName SWIFT_WARN_UNUSED_RESULT;
+ (void)setNeedCloudPrintVCName:(NSArray<NSString *> * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<NSString *> * _Nonnull needMobilePrintVCName;)
+ (NSArray<NSString *> * _Nonnull)needMobilePrintVCName SWIFT_WARN_UNUSED_RESULT;
+ (void)setNeedMobilePrintVCName:(NSArray<NSString *> * _Nonnull)value;
/// 特殊需求，用于喵喵机文档打印
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) PrintParaModel * _Nullable paraModel;)
+ (PrintParaModel * _Nullable)paraModel SWIFT_WARN_UNUSED_RESULT;
+ (void)setParaModel:(PrintParaModel * _Nullable)value;
/// 预期使用设备类型，屏蔽其他设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum DeviceNeedType needType;)
+ (enum DeviceNeedType)needType SWIFT_WARN_UNUSED_RESULT;
+ (void)setNeedType:(enum DeviceNeedType)value;
/// 打印是否可用
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL canPrint;)
+ (BOOL)canPrint SWIFT_WARN_UNUSED_RESULT;
+ (void)go2PrintImageOCWithFetchData:(SWIFT_NOESCAPE UIImage * _Nullable (^ _Nonnull)(BOOL))fetchData;
/// 打印图片（oc调用）,printCount若为0，则判断蓝牙类的printCount
+ (void)printImageWithImages:(NSArray<UIImage *> * _Nullable)images name:(NSString * _Nonnull)name printCount:(NSInteger)printCount isMono:(BOOL)isMono isLabel:(BOOL)isLabel completion:(void (^ _Nullable)(BOOL))completion;
/// 打印图片（oc调用）,printCount若为0，则判断蓝牙类的printCount
+ (void)printImageWithImages:(NSArray<UIImage *> * _Nullable)images name:(NSString * _Nonnull)name printCount:(NSInteger)printCount isMono:(BOOL)isMono isLabel:(BOOL)isLabel addInsets:(BOOL)addInsets completion:(void (^ _Nullable)(BOOL))completion;
/// 打印文档（oc调用）
+ (void)printFileWithFilePara:(PrintCloudFile * _Nullable)filePara name:(NSString * _Nonnull)name printCount:(NSInteger)printCount completion:(void (^ _Nullable)(BOOL))completion;
/// 打印自检页
///
/// returns:
/// description
+ (void)printTestPage;
+ (void)gotoDeviceVC;
/// 检查小盒子是否能正常打印,内部处理异常弹窗
/// \param completion completion description
///
///
/// returns:
/// description
+ (void)checkCloudInfoWithCompletion:(void (^ _Nullable)(BOOL))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end












SWIFT_CLASS("_TtC5MMApi11UsingRecord")
@interface UsingRecord : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef MMAPI_SWIFT_H
#define MMAPI_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import MMDeviceKit;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MMApi",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSNumber;
@class DeviceMileageModel;

SWIFT_CLASS("_TtC5MMApi20DeviceMileageManager")
@interface DeviceMileageManager : NSObject
/// 查询里程是否允许打印
/// \param sn sn description
///
///
/// returns:
/// description
+ (BOOL)mileageEnableWithSn:(NSString * _Nullable)sn SWIFT_WARN_UNUSED_RESULT;
+ (void)uploadLastTripWithSn:(NSString * _Nullable)sn code:(NSString * _Nullable)code sign:(NSString * _Nullable)sign;
/// 消耗里程(单位统一毫米)
///
/// returns:
/// description
+ (void)reduceMileageWithSn:(NSString * _Nullable)sn length:(double)length code:(NSString * _Nullable)code sign:(NSString * _Nullable)sign completion:(void (^ _Nullable)(BOOL, double))completion;
/// 充值里程
/// \param sn sn description
///
/// \param paperId paperId description
///
/// \param completion completion description
///
///
/// returns:
/// description
+ (void)addMileageWithSn:(NSString * _Nullable)sn paperId:(NSString * _Nullable)paperId completion:(void (^ _Nullable)(BOOL, NSString * _Nullable))completion;
/// 查询本地缓存
/// \param sn sn
///
///
/// returns:
/// description
+ (DeviceMileageModel * _Nullable)getMileageInfoWithSn:(NSString * _Nullable)sn SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;

SWIFT_CLASS("_TtC5MMApi18DeviceMileageModel")
@interface DeviceMileageModel : NSObject
- (void)encodeWith:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, DeviceNeedType, "DeviceNeedType", closed) {
  DeviceNeedTypeNormal = 0,
  DeviceNeedTypeCloud = 1,
  DeviceNeedTypeMobile = 2,
};

@class MMBLESupportSizeModel;

SWIFT_CLASS("_TtC5MMApi22DeviceSelectWidthAlert")
@interface DeviceSelectWidthAlert : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)loadDataWithDefaultType:(MMBLESupportSizeModel * _Nullable)defaultType list:(NSArray<MMBLESupportSizeModel *> * _Nonnull)list;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)show;
- (void)dismiss;
/// 隐藏所有
///
/// returns:
/// description
+ (void)hideAll;
@property (nonatomic, copy) void (^ _Nullable okClick)(MMBLESupportSizeModel * _Nullable);
@end


SWIFT_CLASS("_TtC5MMApi18FreedomRemindAlert")
@interface FreedomRemindAlert : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)show;
@property (nonatomic, copy) void (^ _Nullable okClick)(BOOL);
@end


SWIFT_CLASS("_TtC5MMApi16LayoutConstraint")
@interface LayoutConstraint : NSLayoutConstraint
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface LayoutConstraint (SWIFT_EXTENSION(MMApi))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS_NAMED("MMBLESupportSizeModel")
@interface MMBLESupportSizeModel : NSObject
/// 纸宽
@property (nonatomic) NSInteger paperWidth;
- (void)encodeWith:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWith:(NSInteger)paperWidth OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum PrintPreviewType : NSInteger;

@interface MMBLESupportSizeModel (SWIFT_EXTENSION(MMApi))
@property (nonatomic, readonly) enum PrintPreviewType previewType;
+ (NSDictionary<NSString *, MMBLESupportSizeModel *> * _Nonnull)getCaches SWIFT_WARN_UNUSED_RESULT;
+ (void)addCacheWithSn:(NSString * _Nonnull)sn size:(MMBLESupportSizeModel * _Nonnull)size;
@end


@interface MMDevice (SWIFT_EXTENSION(MMApi))
@property (nonatomic, readonly, copy) NSArray<MMBLESupportSizeModel *> * _Nonnull supportSizeModels;
@end


SWIFT_CLASS("_TtC5MMApi12MMDeviceName")
@interface MMDeviceName : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull x2;)
+ (NSString * _Nonnull)x2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mmj;)
+ (NSString * _Nonnull)mmj SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull p1;)
+ (NSString * _Nonnull)p1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull p1d;)
+ (NSString * _Nonnull)p1d SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull p2;)
+ (NSString * _Nonnull)p2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull p2l;)
+ (NSString * _Nonnull)p2l SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull p2s;)
+ (NSString * _Nonnull)p2s SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull p3;)
+ (NSString * _Nonnull)p3 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull c1;)
+ (NSString * _Nonnull)c1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull c1s;)
+ (NSString * _Nonnull)c1s SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bang;)
+ (NSString * _Nonnull)bang SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull d1;)
+ (NSString * _Nonnull)d1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull d2;)
+ (NSString * _Nonnull)d2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull t1;)
+ (NSString * _Nonnull)t1 SWIFT_WARN_UNUSED_RESULT;
/// 自由设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull freedomDevices;)
+ (NSArray<NSString *> * _Nonnull)freedomDevices SWIFT_WARN_UNUSED_RESULT;
/// 4英寸设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull cDevices;)
+ (NSArray<NSString *> * _Nonnull)cDevices SWIFT_WARN_UNUSED_RESULT;
/// 手机连接设备名称
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull mobileDevices;)
+ (NSArray<NSString *> * _Nonnull)mobileDevices SWIFT_WARN_UNUSED_RESULT;
/// 云设备名称
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull cloudDevices;)
+ (NSArray<NSString *> * _Nonnull)cloudDevices SWIFT_WARN_UNUSED_RESULT;
+ (enum PrintPreviewType)previewtypeWithDeviceName:(NSString * _Nullable)deviceName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

SWIFT_CLASS("_TtC5MMApi20MMDeviceUsageManager")
@interface MMDeviceUsageManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MMDeviceUsageManager * _Nonnull manager;)
+ (MMDeviceUsageManager * _Nonnull)manager SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) MMDevice * _Nullable usingDevice;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull enableDeviceNames;
@property (nonatomic, readonly, copy) NSString * _Nullable lastRecordMac;
@property (nonatomic, copy) void (^ _Nullable fetchDevicesHandle)(NSArray<MMDevice *> * _Nonnull);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 搜索设备
- (void)fetchDevices;
/// 判断该设备是否已连接
/// \param mac mac description
///
///
/// returns:
/// description
- (BOOL)isCurrentConnected SWIFT_WARN_UNUSED_RESULT;
- (void)handleUseDeviceSuccessWithDevice:(MMDevice * _Nullable)device;
- (BOOL)isUpdateMCU SWIFT_WARN_UNUSED_RESULT;
- (void)loadFirm:(NSData * _Nonnull)firm;
/// 是否允许使用
/// \param name 设备名
///
///
/// returns:
/// description
- (BOOL)enable:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS("_TtC5MMApi13NetRequestUrl")
@interface NetRequestUrl : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kUrl_api_config_geturlbyname;)
+ (NSString * _Nonnull)kUrl_api_config_geturlbyname SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NotificationNames (SWIFT_EXTENSION(MMApi))
/// MMBLESupportSizeModel 参数
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MMConnectedDevicePrintPreviewType;)
+ (NSString * _Nonnull)MMConnectedDevicePrintPreviewType SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC5MMApi14PrintCloudFile")
@interface PrintCloudFile : NSObject
/// 文档名，用户uid+原文档MD5
@property (nonatomic, copy) NSString * _Nullable fileName;
/// PDF文档，完整URL
@property (nonatomic, copy) NSString * _Nullable fileUrl;
@property (nonatomic) NSInteger pageRangeMin;
@property (nonatomic) NSInteger pageRangeMax;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC5MMApi14PrintDataModel")
@interface PrintDataModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC5MMApi14PrintParaModel")
@interface PrintParaModel : NSObject
@property (nonatomic) BOOL feedline;
@property (nonatomic, copy) NSArray<NSValue *> * _Nonnull points;
@property (nonatomic) BOOL disTop;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, PrintPreviewType, closed) {
  PrintPreviewTypeMm57 = 57,
  PrintPreviewTypeMm80 = 79,
  PrintPreviewTypeMm112 = 110,
  PrintPreviewTypeA4 = 210,
  PrintPreviewTypeTt = 10,
};

@class UIImage;

/// 打印请求类(业务端到ble的中间层)
SWIFT_CLASS("_TtC5MMApi12PrintRequest")
@interface PrintRequest : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<NSString *> * _Nonnull needCloudPrintVCName;)
+ (NSArray<NSString *> * _Nonnull)needCloudPrintVCName SWIFT_WARN_UNUSED_RESULT;
+ (void)setNeedCloudPrintVCName:(NSArray<NSString *> * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<NSString *> * _Nonnull needMobilePrintVCName;)
+ (NSArray<NSString *> * _Nonnull)needMobilePrintVCName SWIFT_WARN_UNUSED_RESULT;
+ (void)setNeedMobilePrintVCName:(NSArray<NSString *> * _Nonnull)value;
/// 特殊需求，用于喵喵机文档打印
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) PrintParaModel * _Nullable paraModel;)
+ (PrintParaModel * _Nullable)paraModel SWIFT_WARN_UNUSED_RESULT;
+ (void)setParaModel:(PrintParaModel * _Nullable)value;
/// 预期使用设备类型，屏蔽其他设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum DeviceNeedType needType;)
+ (enum DeviceNeedType)needType SWIFT_WARN_UNUSED_RESULT;
+ (void)setNeedType:(enum DeviceNeedType)value;
/// 打印是否可用
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL canPrint;)
+ (BOOL)canPrint SWIFT_WARN_UNUSED_RESULT;
+ (void)go2PrintImageOCWithFetchData:(SWIFT_NOESCAPE UIImage * _Nullable (^ _Nonnull)(BOOL))fetchData;
/// 打印图片（oc调用）,printCount若为0，则判断蓝牙类的printCount
+ (void)printImageWithImages:(NSArray<UIImage *> * _Nullable)images name:(NSString * _Nonnull)name printCount:(NSInteger)printCount isMono:(BOOL)isMono isLabel:(BOOL)isLabel completion:(void (^ _Nullable)(BOOL))completion;
/// 打印图片（oc调用）,printCount若为0，则判断蓝牙类的printCount
+ (void)printImageWithImages:(NSArray<UIImage *> * _Nullable)images name:(NSString * _Nonnull)name printCount:(NSInteger)printCount isMono:(BOOL)isMono isLabel:(BOOL)isLabel addInsets:(BOOL)addInsets completion:(void (^ _Nullable)(BOOL))completion;
/// 打印文档（oc调用）
+ (void)printFileWithFilePara:(PrintCloudFile * _Nullable)filePara name:(NSString * _Nonnull)name printCount:(NSInteger)printCount completion:(void (^ _Nullable)(BOOL))completion;
/// 打印自检页
///
/// returns:
/// description
+ (void)printTestPage;
+ (void)gotoDeviceVC;
/// 检查小盒子是否能正常打印,内部处理异常弹窗
/// \param completion completion description
///
///
/// returns:
/// description
+ (void)checkCloudInfoWithCompletion:(void (^ _Nullable)(BOOL))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end












SWIFT_CLASS("_TtC5MMApi11UsingRecord")
@interface UsingRecord : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
